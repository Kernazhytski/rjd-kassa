create table if not exists users
(
    id           uuid    not null
        constraint id
            primary key,
    name         varchar,
    surname      varchar,
    patronymic   varchar,
    passport_num varchar,
    password     varchar not null,
    login        varchar not null
        unique
);

alter table users
    owner to admin;

create table if not exists roles
(
    name varchar not null,
    id   integer not null
        constraint roles_pk
            primary key
);

alter table roles
    owner to admin;

create table if not exists user_to_roles
(
    id      integer generated by default as identity
        constraint user_to_roles_pk
            primary key,
    user_id uuid    not null
        constraint user_to_roles___fk_uesr
            references users,
    role_id integer not null
        constraint user_to_roles___fk_role
            references roles
);

alter table user_to_roles
    owner to admin;

create table if not exists nsi_train_types
(
    id   integer not null
        constraint pk_train_types
            primary key,
    name varchar not null
        unique
);

alter table nsi_train_types
    owner to admin;

create table if not exists trains
(
    id            integer generated always as identity
        constraint pk_trains
            primary key,
    number        varchar not null
        unique,
    model         varchar not null,
    passengers    integer not null,
    train_type_id integer not null
        constraint trains_train_types_pk
            references nsi_train_types
);

alter table trains
    owner to admin;

create table if not exists routes
(
    id          integer generated always as identity
        constraint pk_routes
            primary key,
    start       varchar        not null,
    finish      varchar        not null,
    travel_time numeric(18, 2) not null
);

alter table routes
    owner to admin;

create table if not exists voyages
(
    id          integer generated always as identity
        constraint pk_voyages
            primary key,
    route_id    integer        not null
        constraint voyage_route_pk
            references routes,
    train_id    integer        not null
        constraint voyage_train_pk
            references trains,
    start_date  timestamp      not null,
    is_start    boolean,
    ticket_cost numeric(18, 2) not null
);

alter table voyages
    owner to admin;

create table if not exists tickets
(
    id        integer generated always as identity
        constraint pk_ticket_id
            primary key,
    number    uuid    not null,
    user_id   uuid    not null
        constraint tickets_users_id_fk
            references users
            on update cascade on delete cascade,
    voyage_id integer not null
        constraint tickets_voyages_id_fk
            references voyages
            on update cascade on delete cascade
);

alter table tickets
    owner to admin;

create or replace function uuid_nil() returns uuid
    immutable
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_nil() owner to admin;

create or replace function uuid_ns_dns() returns uuid
    immutable
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_ns_dns() owner to admin;

create or replace function uuid_ns_url() returns uuid
    immutable
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_ns_url() owner to admin;

create or replace function uuid_ns_oid() returns uuid
    immutable
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_ns_oid() owner to admin;

create or replace function uuid_ns_x500() returns uuid
    immutable
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_ns_x500() owner to admin;

create or replace function uuid_generate_v1() returns uuid
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_generate_v1() owner to admin;

create or replace function uuid_generate_v1mc() returns uuid
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_generate_v1mc() owner to admin;

create or replace function uuid_generate_v3(namespace uuid, name text) returns uuid
    immutable
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_generate_v3(uuid, text) owner to admin;

create or replace function uuid_generate_v4() returns uuid
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_generate_v4() owner to admin;

create or replace function uuid_generate_v5(namespace uuid, name text) returns uuid
    immutable
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

alter function uuid_generate_v5(uuid, text) owner to admin;

